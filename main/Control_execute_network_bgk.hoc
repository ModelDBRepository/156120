//Control crated by Oscar Javier Avella from modifications on Ronald vn Elburg 
//Neuron-files
                               
                                

// --------------------------------------------------------------
// Loading Standard Menus
// --------------------------------------------------------------

	UseGui=1   
	if(UseGui==1){
    	load_file("nrngui.hoc")	
		nrnmainmenu()
		runStopAt=tstop
		runStopIn = 100
		nrncontrolmenu()
	}

// --------------------------------------------------------------
// --------------------------------------------------------------
if(UseGui==1){
		load_file("../Instrum_Visualize/spikeplot2.hoc")
	}else{
		load_file("emptyGUIClasses.hoc")      
	}

        create cvode_init_dummy			// CVode needs an accessed section for some of the settings to take effect
	access cvode_init_dummy
	Ra=150	
	load_file("../MRC/cvode_init.hoc")
	
	// Set a few Global Flags
	useprtmymes=0			// Setting this flag to one will make the template cells produce basic debugging info
	screen_update_invl=0.05	// Screen Update Interval of GUI
 
// General simulation related settings
	dt = 0.025           //time step
	//tstop = 1200         //1 second simulation
	steps_per_ms = 40    
//celsius   = 37       // temperature scales kinetics of active currents
  	
//load_file("./in_process/functions_net_bgk_multitest_sparse_onboard.hoc")
load_file("functions_net_bgk_multitest_sparse.hoc")

//load_file("functions_net_bgk_multitest.hoc") //Load the network's  builder-administrator
//load_file("functions_net_bgk_testING.hoc") //Load the network's  builder-administrator	
	strdef win_title,win_title1
	objref SP_FS[n_layerFS],SP_pyr[n_layerP] //,SP_NS[fs_popul+pyram_popul] references to spikeplots
	objref SP_NS[n_layerP+n_layerFS] //references to spikeplots
	
	       
//creating layers  
//==================================================================================
//==================================================================================
        if(n_layerP && n_P>0){
        for i=0, n_layerP-1{
        if(layerP[i].count()>0){
        sprint(win_title1, "Pyramidal Cells Population # %d", i)
        SP_pyr[i]= new SpikePlot2(layerP[i],0,win_title1)
          }
        } 
      }     
        if(n_layerFS>0 && n_FS>0){
        for i=0, n_layerFS-1{
        if(layerFS[i].count()>0){
        sprint(win_title, "Fast Spiking Cells Population # %d", i)
        SP_FS[i] = new SpikePlot2(layerFS[i],0,win_title)
        }
    }
  }
//==================================================================================
//==================================================================================
        
//creating vectors to save the data
	
	objref yvec1[n_layerFS], tvec1[n_layerFS], yvec3[n_layerP], tvec3[n_layerP]
	objref yvec2[n_layerFS], tvec2[n_layerFS], yvec4[n_layerP], tvec4[n_layerP]
	objref TracePlot
	strdef buttontext, buttoncomand
	
	if(UseGui==1){ 
	}
             

if(n_P>0&&n_FS>0&&n_layerP==1&&n_layerFS==1){
    load_file("sessions/DrivePower_run_mono_no_spk.ses")
    flag_p=1    
    }else{
        if(n_layerP==2&&n_layerFS==2){
       load_file("sessions/DrivePower_run_multi.ses")	
	   flag_p=2
       }
	}
	
    load_file("./sessions/parameters.hoc")
    print_parameters(flag_p,nme)	
	


